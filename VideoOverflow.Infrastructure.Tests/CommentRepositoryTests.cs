using System;
using System.Linq;
using VideoOverflow.Infrastructure.Entities;

namespace VideoOverflow.Infrastructure.Tests;

public class CommentRepositoryTests
{

    private readonly VideoOverflowContext _context;
    private readonly CommentRepository _repo;
    public CommentRepositoryTests()
    {
        var repo = new RepositoryTestsSetup();
        _context = repo.Context;
        
        _repo = new CommentRepository(_context);
    }
    
    [Fact]
    public async Task GetAll_Returns_All_Comments()
    {

        var user1 = new User() {Name = "OndFisk"};
        var user2 = new User() {Name = "SÃ¸dFisk"};

        
        _context.Users.Add(user1); 
        _context.Users.Add(user2);

       
        var first = (from u in _context.Users where u.Id == 1 select new UserDTO(u.Id, u.Name, u.Comments.Select(c => c.Content).ToList())).FirstOrDefaultAsync();
        var second = (from u in _context.Users where u.Id == 2 select new UserDTO(u.Id, u.Name, u.Comments.Select(c => c.Content).ToList())).FirstOrDefaultAsync();
       
      
        
        
        var user1Comment1 = new CommentCreateDTO() {CreatedBy = first.Id, Content = "This docker tutorial is smooth"};
        var user1Comment2 = new CommentCreateDTO() {CreatedBy = first.Id, Content = "Very helpful guide for beginners!"};
        
        var user2Comment1 = new CommentCreateDTO() {CreatedBy = second.Id, Content = "Indeed"};
        var user2Comment2 = new CommentCreateDTO() {CreatedBy = second.Id, Content = "Thank you very much!"};
        
        
        await _repo.Push(user1Comment1);
        await _repo.Push(user1Comment2);
        await _repo.Push(user2Comment1);
        await _repo.Push(user2Comment2);
        

        var comments = await _repo.GetAll();

        Assert.Collection(comments, comment => Assert.Equal(new CommentDTO(1, 1, "This docker tutorial is smooth"), comment),
            comment => Assert.Equal(new CommentDTO(2, 1, "Very helpful guide for beginners!"), comment),
            comment => Assert.Equal(new CommentDTO(3, 2, "Indeed"), comment),
            comment => Assert.Equal(new CommentDTO(4, 2, "Thank you very much!"), comment));
    }

    [Fact]
    public async Task GetAll_Returns_Empty_List_For_No_existsing_Comments()
    {
        var actual = await _repo.GetAll();

        var expected = new ReadOnlyCollection<CommentDTO>(new Collection<CommentDTO>());

        expected.Should().BeEquivalentTo(actual);
    }
    
    [Fact]
    public async Task Push_creates_new_comment_with_autogenerated_id_and_written_content()
    {
        var comment = new CommentCreateDTO() {Content = "Nice Video!"};

        var actual = await _repo.Push(comment);
        
        Assert.Equal(1, actual.Id);
        Assert.Equal("Nice Video!", actual.Content);
    }
    
    [Fact]
    public async Task Get_returns_Category_for_given_id()
    {
        var category = new CommentCreateDTO() {Content = "A simple comment"};

        await _repo.Push(category);

       // var expected = new CommentDTO(1, "A simple comment");

        var actual = await _repo.Get(1);
        
        // Assert.Equal(expected, actual);
    }

    [Fact]
    public async void Get_returns_null_for_non_existing_id()
    {
        var comment = await _repo.Get(4);
        
        Assert.Null(comment);
    }


    [Fact]
    public async Task Update_of_existing_comment_returns_StateUpdated()
    {
        var comment = new CommentCreateDTO() {Content = "This is an awesome project!"};

        await _repo.Push(comment);

        var update = new CommentUpdateDTO() {Id = 1, Content = "Yes, i mean it's crazy!"};

        var actual = await _repo.Update(update);
        
        Assert.Equal(Status.Updated, actual);
    }

    [Fact]
    public async Task Update_returns_NotFound_for_non_existing_category()
    {
        var update = new CommentUpdateDTO() {Id = 10, Content = "Am i trying to change an non-existing comment?"};

        var response = await _repo.Update(update);
        
        Assert.Equal(Status.NotFound, response);
    }
    
    
}