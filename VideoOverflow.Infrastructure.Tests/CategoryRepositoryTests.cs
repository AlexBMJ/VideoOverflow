using System.Collections.ObjectModel;

namespace VideoOverflow.Infrastructure.Tests;

public class CategoryRepositoryTests
{
    private readonly IVideoOverflowContext _context;
    private readonly CategoryRepository _repo;
    public CategoryRepositoryTests()
    {
        var repo = new RepositoryTestsSetup();
        _context = repo.Context;
        
        _repo = new CategoryRepository(_context);
    }
    
    [Fact]
    public async Task GetAll_Returns_All_Categories()
    {
        var category1 = new CategoryCreateDTO() {Name = "Programming"};
        var category2 = new CategoryCreateDTO() {Name = "Software Engineering"};

        await _repo.Push(category1);
        await _repo.Push(category2);

        var comments = await _repo.GetAll();

        Assert.Collection(comments, comment => Assert.Equal(new CategoryDTO(1, "Programming"), comment),
            comment => Assert.Equal(new CategoryDTO(2, "Software Engineering"), comment));
    }

    [Fact]
    public async Task GetAll_Returns_Empty_List_For_No_existsing_Categories()
    {
        var actual = await _repo.GetAll();

        var expected = new ReadOnlyCollection<CategoryDTO>(new Collection<CategoryDTO>());

        expected.Should().BeEquivalentTo(actual);
    }

    [Fact]
    public async Task Push_creates_new_category_with_autogenerated_id_and_given_name()
    {
        var category = new CategoryCreateDTO() {Name = "Software Engineering"};

        var actual = await _repo.Push(category);
        
        
        Assert.Equal(1, actual.Id);
        Assert.Equal("Software Engineering", actual.Name);
    }

    [Fact]
    public async void Get_returns_null_for_non_existing_id()
    {
        var option = await _repo.Get(4);
        
        Assert.Null(option);
    }

    [Fact]
    public async Task Get_returns_Category_for_given_id()
    {
        var category = new CategoryCreateDTO() {Name = "Programming"};

        await _repo.Push(category);

        var expected = new CategoryDTO(1, "Programming");

        var actual = await _repo.Get(1);
        
        Assert.Equal(expected, actual);
    }


    [Fact]
    public async Task Update_of_existing_category_returns_StateUpdated()
    {
        var category = new CategoryCreateDTO() {Name = "SE"};

        await _repo.Push(category);

        var update = new CategoryUpdateDTO() {Id = 1, Name = "Software Engineering"};

        var actual = await _repo.Update(update);
        
        Assert.Equal(Status.Updated, actual);
    }

    [Fact]
    public async Task Update_returns_NotFound_for_non_existing_category()
    {
        var update = new CategoryUpdateDTO() {Id = 10, Name = "SE"};

        var response = await _repo.Update(update);
        
        Assert.Equal(Status.NotFound, response);
    }
    
    [Fact]
    public async Task Update_changes_name_of_category_of_givenID()
    {
        var category = new CategoryCreateDTO() {Name = "Programming"};

        await _repo.Push(category);

        var update = new CategoryUpdateDTO() {Id = 1, Name = "Database"};

        await _repo.Update(update);

        var expected = new CategoryDTO(1, "Database");

        var actual = await _repo.Get(1);
        
        Assert.Equal(expected, actual);
    }
    
}