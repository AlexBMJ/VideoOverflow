@page "/Browse"
@using VideoOverflow.Core
@using VideoOverflow.Core.DTOs
@using Microsoft.AspNetCore.WebUtilities
@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject ISnackbar _snackbar

<PageTitle>Browse</PageTitle>
<MudGrid Justify="Justify.Center" Spacing="1" Class="my-4">
        <MudItem lg="8" md="8" sm="7" xs="12">
            <MudTextField @bind-Value="_search" OnKeyPress="@(e => {if (e.Code == "Enter") {SpellCheck();Search();}})" Immediate="true" Label="Search" Variant="Variant.Outlined" Adornment="Adornment.End" OnAdornmentClick="@(Search)" AdornmentIcon="@Icons.Filled.Search" AdornmentColor="Color.Secondary"/>
            @if (!string.IsNullOrEmpty(_correctionSuggestion)) {
                <MudChip OnClick="@(() => { _search = _correctionSuggestion; _correctionSuggestion = null; Search(); })" Label="true">Did you mean: @_correctionSuggestion</MudChip>
            }
        </MudItem>
        <MudItem lg="3" md="3" sm="3" xs="12">
            <MudSelect @bind-Value="_category" T="string" Label="Category" Strict="true" Variant="Variant.Outlined" Format="F2" AnchorOrigin="Origin.BottomCenter" AdornmentIcon="@Icons.Filled.Category">
                @foreach (var ctg in _categories) {
                    <MudSelectItem Value="@ctg.Name"/>
                }
            </MudSelect>
        </MudItem>
</MudGrid>

<MudDivider/>

<MudTable T="SettableTuple<bool, ResourceDTO>" Items="_resources" Bordered="true" Class="ma-4" Height="84vh">
    <RowTemplate>
        <MudGrid Style="width: calc(100% + 12px)">
            <MudItem Class="d-flex align-center">
                <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowRight" aria-label="closed" OnClick="@(() => ShowDetails(context.Item2.Id))"/>
            </MudItem>
            <MudItem xl="1" lg="1" md="1" Class="d-flex align-center">
                <MudIcon Icon="@GetMaterialIcon(context.Item2.MaterialType)"/>
            </MudItem>
            <MudItem xl="3" lg="3" md="2" Class="d-flex align-center">@context.Item2.SiteTitle</MudItem>
            <MudItem xl="2" lg="2" md="1" Class="d-flex align-center">@context.Item2.Language</MudItem>
            <MudItem xl="2" lg="2" md="2" Class="d-flex align-center">@context.Item2.Author</MudItem>

             <MudItem xl="1" lg="1" md="1" Class="d-flex align-center"> @context.Item2.Created.Value.Day-@context.Item2.Created.Value.Month-@context.Item2.Created.Value.Year </MudItem>
                        <MudItem Style="margin-left: 30px" Class="d-flex align-center">
                            <MudFab Style="height: 40px; width: 40px; margin-left: 50px" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" aria-label="edit" OnClick="@(() => NavigateToResource(context.Item2.Id))"/>
                            <MudButton Style="margin-left: 10px; width: 15px" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() =>  Delete(context.Item2.Id))"/>
                        </MudItem>


        </MudGrid>
        <MudDivider/>
    </RowTemplate>
    <ChildRowContent>
        @if (context.Item1) {
            <MudTr>
                <td colspan="4">
                    <MudGrid>
                        <MudItem xl="5" lg="3" md="3">
                            <MudCard Elevation="0">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.body1">Comments</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent Class="pa-4">
                                    <MudCardContent Class="pa-4">
                                    </MudCardContent>
                                    @if (context.Item2.Comments.Count == 0)
                                    {
                                        <MudChip Class="mud-theme-secondary">No Comments</MudChip>
                                    }
                                    else
                                    {
                                        <MudTable Items="context.Item2.Comments" Context="comment" Height="10em"
                                                  Elevation="0">
                                            <RowTemplate>
                                                <MudText Class="py-2">@comment</MudText>
                                                <MudDivider/>
   
                                            </RowTemplate>
   
                                        </MudTable>
                                    }
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                        <MudItem>
                            <MudCard Elevation="0">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.body1">Categories</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent Class="pa-4">
                                    @foreach (var category in context.Item2.Categories) {
                                        <MudChip Class="mud-theme-secondary">@category</MudChip>
                                        
                                    }
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                        <MudItem xl="5" lg="3" md="3">
                            <MudCard Elevation="0">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.body1">Tags</MudText>
                                        
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent Class="pa-4">
                                    <MudTable Items="context.Item2.Tags" Context="tag" Height="10em"
                                              Elevation="0">
                                        <RowTemplate>
                                            <MudItem xl="3" lg="3" md="4" sm="4" Class="d-flex flex-wrap align-center" Style="margin-top: 5px; margin-bottom: 5px">
                                                @if (context.Item2.Tags.Count == 0)
                                                {
                                                    <MudChip Class="mud-theme-tertiary" Style="cursor: pointer;">No tags</MudChip>
                                                }
                                                else
                                                {
                                                    foreach (var tag in context.Item2.Tags)
                                                    {
                                                        <MudChip Class="mud-theme-tertiary" Style="cursor: pointer;">@tag</MudChip>
                                                    } 
                                                }
                                            </MudItem>
                                            <MudDivider/>
                                        </RowTemplate>
                                    </MudTable>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                        
                    </MudGrid>
                    <MudItem>
                        <MudCard Elevation="0">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.body1">External Site</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent Class="pa-4" Style="">
                                <MudLink Href="@context.Item2.SiteUrl">@context.Item2.SiteUrl</MudLink>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                </td>
            </MudTr>
        }
        <MudDivider/>
    </ChildRowContent>
</MudTable>
<MudDivider/>
<MudGrid Justify="Justify.Center" Spacing="1" Class="my-4">
    <MudItem xs="12" sm="6" md="4">
        <MudNumericField @bind-Value="_resultCount" Label="Results" Variant="Variant.Outlined" Step="5" Min="5" Max="50" />
    </MudItem>
        <MudItem lg="3" md="3" sm="3" xs="12">
            <MudIconButton Class="ma-2" Color="Color.Primary" Icon="@Icons.Filled.ArrowBackIosNew" OnClick="@(() => {if (_page > 1) {_page-=1; Search();}})" Size="Size.Large" Variant="Variant.Filled" />
            <MudIconButton Class="ma-2" Color="Color.Primary" Icon="@Icons.Filled.ArrowForwardIos" OnClick="@(() => {_page+=1; Search();})" Size="Size.Large" Variant="Variant.Filled" />
        </MudItem>
</MudGrid>


@code {
    private string _search = "";
    private IList<SettableTuple<bool, ResourceDTO>> _resources = new List<SettableTuple<bool, ResourceDTO>>();
    private IList<CategoryDTO> _categories = new List<CategoryDTO>();
    private string _category = "None";
    private string? _correctionSuggestion;
    private int _resultCount = 10;
    private int _page = 1;

    protected override async Task OnInitializedAsync() {
        var categories = await _http.GetFromJsonAsync<CategoryDTO[]>("Api/Category");
        if (categories != null)
            _categories = categories.ToList();
        _categories.Insert(0, new CategoryDTO(0, "None"));
    }

    private async Task SpellCheck() {
        var uri = QueryHelpers.AddQueryString("Api/Resource/Spelling",
            new Dictionary<string, string?>() {["Query"] = _search});
        var suggestion = await _http.GetStringAsync(uri);
        _correctionSuggestion = suggestion != _search ? suggestion : null;
        StateHasChanged();
    }

    private async Task Search() {
        var resources = await GetResources();
        if (resources != null) {
            _resources = resources.Select(r => new SettableTuple<bool, ResourceDTO>(false, r)).ToList();
            StateHasChanged();
        }
    }

    private async Task<IEnumerable<ResourceDTO>?> GetResources() {
        var queryStringParams = new Dictionary<string, string?>() {
            ["Category"] = _categories.First(c=>c.Name.Equals(_category)).Id.ToString(),
            ["Query"] = _search,
            ["Count"] = _resultCount.ToString(),
            ["Page"] = _page.ToString()
        };
        var uri = QueryHelpers.AddQueryString("Api/Resource/Search", queryStringParams);
        return await _http.GetFromJsonAsync<ResourceDTO[]>(uri);
    }

    private string GetMaterialIcon(ResourceType material) {
        return material switch
        {
            ResourceType.Article => Icons.Filled.Article,
            ResourceType.Book => Icons.Filled.MenuBook,
            ResourceType.Video => Icons.Filled.VideoLibrary,
            _ => throw new ArgumentOutOfRangeException(nameof(material), material, null)
        };
    }

    private async Task Delete(int id) {
        var response = await _http.DeleteAsync($"Api/Resource/{id}");
        
        if (response.IsSuccessStatusCode)
        {
            _snackbar.Add("Resource removed");
            var entity = _resources?.Where(c => c.Item2.Id 
                 == id).Select(c => c).FirstOrDefault();
            if (entity != null) {
                _resources?.Remove(entity);
                StateHasChanged();
            }
        }
    }

    private void ShowDetails(int id) {
        var resource = _resources?.FirstOrDefault(r => r.Item2.Id == id);
        if (resource == null) return;
        var resourceIndex = _resources?.IndexOf(resource) ?? -1;
        if (resourceIndex == -1) return;
        var re = _resources?[resourceIndex];
        if (re == null) return;
        re.Item1 = !re.Item1;
    }

    private class SettableTuple<T,T2> {
        public T Item1 { get; set; }
        public T2 Item2 { get; set; }

        public SettableTuple(T i1, T2 i2) {
            Item1 = i1;
            Item2 = i2;
        }
    }
    
    private void NavigateToResource(int id)
    {
        _navigationManager.NavigateTo($"Edit/{id}");
    }

}