@page "/Add"
@using Microsoft.AspNetCore.Components
@using VideoOverflow.Core.DTOs
@using System.ComponentModel.DataAnnotations
@using System.Linq
@using System.Text.RegularExpressions
@using FluentAssertions.Extensions
@using Microsoft.AspNetCore.Authorization
@using VideoOverflow.Core
@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject ISnackbar Snackbar

<MudContainer Class="ma-2">
    <h1>Create Resource</h1>
    <MudDivider/>
    <MudForm Model="_createForm" >
        <MudTextField T="string" Label="Site Title" @bind-Value="_createForm.SiteTitle"/>
        <MudTextField T="string" Label="Site Url" @bind-Value="_createForm.SiteUrl"/>
        <MudSelect T="string" Label="MaterialType" Variant="Variant.Outlined" @bind-Value="_createForm.MaterialType" AnchorOrigin="Origin.BottomCenter">
            <MudSelectItem Value="@("Video")"/>
            <MudSelectItem Value="@("Article")"/>
            <MudSelectItem Value="@("Book")"/>
        </MudSelect>
        <MudTextField T="string" Label="Author" @bind-Value="_createForm.Author"/>

        <MudNumericField @bind-Value="_createForm.LixNumber" HelperText="Lix" Variant="Variant.Text" HideSpinButtons="true" />
    	    
        <MudTextField T="string" Label="Language" @bind-Value="_createForm.Language"/>
        <MudTextField T="string" Label="Tags" @bind-Value="_createForm.Tags"/>
        
        <MudGrid>
            <MudItem xs="12" md="12">
                <MudSelect T="string" Label="Categories" HelperText="Pick the categories"
                           MultiSelection="true" OffsetY="true" DelimitedStringSeparator="^" SelectAll="false" SelectAllText="Select all categories"
                           @bind-Value="value" @bind-SelectedValues="options" AdornmentIcon="@Icons.Material.Filled.Search"
                           MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))">
                    @foreach (var category in Categories)
                    {
                        <MudSelectItem T="string" Value="@category.Name">@category.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>

        <MudDatePicker Label="DateCreated" @bind-Date="_date"/>

    </MudForm>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await HandleValidSubmit())">Submit</MudButton>
</MudContainer>





@code {
    private CreateForm _createForm = new();
    private DateTime? _date = DateTime.Today;
    private string value { get; set; } = "Nothing selected";
    private List<CategoryDTO> Categories = new List<CategoryDTO>();
    private IEnumerable<string> options { get; set; } = new HashSet<string>() { };
    
    
        private async Task HandleValidSubmit()
        {

            if (!isValidUrl(_createForm.SiteUrl))
            {
                Snackbar.Add("INVALID URL!");
                return;
            }
            
            if (_date > DateTime.Now)
            {
                Snackbar.Add("Please pick a valid date");
                return;
            }

            var payload = new ResourceCreateDTO()
            {
                Created = DateTime.Parse(_date.Value.Day + "-" + _date.Value.Month + "-" + _date.Value.Year).AsUtc(),
                MaterialType = _createForm.MaterialType == "Video" ? ResourceType.Video :
                    _createForm.MaterialType == "Article" ? ResourceType.Article : ResourceType.Book,
                SiteUrl = _createForm.SiteUrl,
                SiteTitle = _createForm.SiteTitle,
                Author = _createForm.Author == null ? "Unknown" : _createForm.Author,
                LixNumber = _createForm.LixNumber,
                Language = _createForm.Language,
                Tags = _createForm.Tags.Split(", "),
                Categories = options.Select(c => c).ToList()
            };

            var response = await _http.PostAsJsonAsync("api/resource", payload);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("You have successfully added a resource");
            }
        }
    
    private string GetMultiSelectionText(List<string> selectedValues)
    {
        return $"{selectedValues.Count} {(selectedValues.Count > 1 ? "categories have" : "category has")} been selected";
    }
    
    private class CreateForm
    {
        [Required]
        public string SiteTitle { get; set; }

        [Required]
        public string SiteUrl { get; set; }

        [Required]
        public string MaterialType { get; set; }

        public string? Author { get; set; }

        [Required]
        public int LixNumber { get; set; }

        [Required]
        public string Language { get; set; }

        [Required]
        public string Tags { get; set; }
    }

    private bool isValidUrl(string url)
    {
        return new Regex(@"(https?:\/\/|www\.)[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()!@:%_\+.~#?&\/\/=]*)").Match(url).Success;
    }

    protected override async Task OnInitializedAsync()
    {
        {
            var categories = await _http.GetFromJsonAsync<List<CategoryDTO>>("api/Category");

            if (categories != null)
            {
                Categories = categories;
            }
        }
    }
}