@page "/Add Resources"
@using Microsoft.AspNetCore.Components
@using VideoOverflow.Core.DTOs
@using System.ComponentModel.DataAnnotations
@using System.Linq
@using System.Text.RegularExpressions
@using VideoOverflow.Core
@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject ISnackbar _snackbar

<MudContainer Class="ma-2">
    <MudText Class="ma-2" Typo="Typo.h4">Create Resource</MudText>
    <MudDivider/>
    <MudForm Model="_createForm">
        <MudTextField T="string" Label="Site Title" @bind-Value="_createForm.SiteTitle" HelperTextOnFocus="true" HelperText="Please give your resource a name" Required="true" RequiredError="Title is required!"/>
        <MudTextField T="string" Label="Site Url" @bind-Value="_createForm.SiteUrl" HelperTextOnFocus="true" HelperText="Please enter a valid url for the resource" Required="true" RequiredError="Url is required and must be valid!"/>
        <MudSelect T="string" Label="MaterialType" @bind-Value="_createForm.MaterialType" AnchorOrigin="Origin.BottomCenter" HelperTextOnFocus="true" HelperText="Choose a material type" Required="true" RequiredError="A material type is required!">

            <MudSelectItem Value="@("Video")"/>
            <MudSelectItem Value="@("Article")"/>
            <MudSelectItem Value="@("Book")"/>
        </MudSelect>
        <MudTextField T="string" Label="Author" @bind-Value="_createForm.Author" HelperTextOnFocus="true" HelperText="Please enter a name of the author of the resource"/>
        <MudNumericField @bind-Value="_createForm.LixNumber" Label="Lix" Variant="Variant.Text" HideSpinButtons="true" HelperTextOnFocus="true" HelperText="Please give your resource a lix number (difficulty of content)" Required="true" RequiredError="Lix number is required!"/>
        <MudTextField T="string" Label="Language" @bind-Value="_createForm.Language" HelperTextOnFocus="true" HelperText="Please give your resource a language" Required="true" RequiredError="Language is required!"/>
        <MudTextField T="string" Label="Tags" @bind-Value="_createForm.Tags" HelperTextOnFocus="true" HelperText="Please give your resource one ore more tags"/>
        <MudSelect T="string" Label="Categories" MultiSelection="true" SelectAll="false" SelectAllText="Select all categories" @bind-Value="Value" @bind-SelectedValues="Options" AdornmentIcon="@Icons.Material.Filled.Search" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText!))"
                   HelperTextOnFocus="true" HelperText="Please give your resource one or more categories">
            @foreach (var category in _categories)
            {
                <MudSelectItem T="string" Value="@category.Name">@category.Name</MudSelectItem>
            }
        </MudSelect>
        <MudDatePicker Label="DateCreated" @bind-Date="_createForm.Created" Required="true" RequiredError="Creation date is required!" HelperTextOnFocus="true" HelperText="Please give your resource a valid creation date"/>
    </MudForm>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto ma-4" OnClick="@(async () => await HandleValidSubmit())">Submit</MudButton>
</MudContainer>


@code {
    private readonly CreateForm _createForm = new();
    private string Value { get; set; } = "Nothing selected";
    private List<CategoryDTO> _categories = new List<CategoryDTO>();
    private IEnumerable<string> Options { get; set; } = new HashSet<string>();
    
    
        private async Task HandleValidSubmit()
        {
            if (_createForm.SiteTitle == null)
                _snackbar.Add("Please pick a title!");
            
            if (_createForm.MaterialType == null)
                _snackbar.Add("Please pick a Material!");
            
            if (_createForm.Language == null)
                _snackbar.Add("Please pick a Language!");

            if (string.IsNullOrEmpty(_createForm.Tags))
                _createForm.Tags = "";

            if (_createForm.SiteUrl == null || !IsValidUrl(_createForm.SiteUrl))
            {
                _snackbar.Add("Invalid URL!");
                return;
            }
            
            if (_createForm.Created > DateTime.UtcNow)
            {
                _snackbar.Add("Please pick a valid date");
                return;
            }
            
            if (_createForm.LixNumber < 0)
            {
                _createForm.LixNumber = 0;
            }

            var payload = new ResourceCreateDTO()
            {
                Created = _createForm.Created.GetValueOrDefault(DateTime.UtcNow).ToUniversalTime(),
                MaterialType = _createForm.MaterialType switch
                {
                    "Video" => ResourceType.Video,
                    "Article" => ResourceType.Article,
                    _ => ResourceType.Book
                    },
                SiteUrl = _createForm.SiteUrl,
                SiteTitle = _createForm.SiteTitle,
                Author = _createForm.Author ?? "Unknown",
                LixNumber = _createForm.LixNumber.GetValueOrDefault(0),
                Language = _createForm.Language,
                Tags = _createForm.Tags.Split(", "),
                Categories = Options.Select(c => c).ToList()
            };

            var response = await _http.PostAsJsonAsync("api/resource", payload);

            if (response.IsSuccessStatusCode)
            {
                _snackbar.Add("You have successfully added a resource");
            }
        }
    
    private static string? GetMultiSelectionText(List<string> selectedValues)
    {
        return selectedValues.Count == 0 ? null : $"{selectedValues.Count} {(selectedValues.Count > 1 ? "categories have" : "category has")} been selected";
    }
    
    private class CreateForm
    {
        [Required]
        public string? SiteTitle { get; set; }

        [Required]
        public string? SiteUrl { get; set; }

        [Required]
        public string? MaterialType { get; set; }

        public string? Author { get; set; }

        [Required]
        public int? LixNumber { get; set; }

        [Required]
        public string? Language { get; set; }

        [Required]
        public string? Tags { get; set; }

        [Required]
        public DateTime? Created { get; set; }
    }

    private static bool IsValidUrl(string url)
    {
        return new Regex(@"(https?:\/\/|www\.)[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()!@:%_\+.~#?&\/\/=]*)").Match(url).Success;
    }

    protected override async Task OnInitializedAsync()
    {
        {
            var categories = await _http.GetFromJsonAsync<List<CategoryDTO>>("api/Category");

            if (categories != null)
            {
                _categories = categories;
            }
        }
    }
}