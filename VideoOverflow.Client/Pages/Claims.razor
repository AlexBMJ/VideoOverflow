@using System.Security.Claims
@inject AuthenticationStateProvider _authenticationStateProvider
@page "/claims"

<PageTitle>Claims</PageTitle>
<MudContainer Class="ma-2">
    <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
        <MudText Typo="Typo.h4">Claims</MudText>
    </MudHidden>
    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
        <MudText Typo="Typo.h6">Claims</MudText>
    </MudHidden>  
    <MudText Class="ma-2" Typo="Typo.body1">@_message</MudText>

    @if (_claims.Any())
    {
        <MudTable Items="@_claims.Take(_claims.Count())" Breakpoint="Breakpoint.Xs">
            <HeaderContent>
                <MudTh>Type</MudTh>
                <MudTh>Value</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Type">@context.Type</MudTd>
                <MudTd DataLabel="Value">@context.Value</MudTd>
            </RowTemplate>
        </MudTable>
    }
    <MudText Class="ma-2">User is admin/developer: @_authenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole($"developer")</MudText>
    <MudDivider/>
</MudContainer>

@code {
    private string _message = string.Empty;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync() ;
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            _message = $"You are logged in as: {user.Identity.Name}.";
            _claims = user.Claims;
        }
        else
        {
            _message = "The user is NOT authenticated.";
        }
    }
}